nohup: ignoring input
mmd 2022 77G own DAN/DAN.yaml
Namespace(backbone='resnet50', batch_size=32, config='DAN/DAN.yaml', data_dir='data', device=device(type='cuda'), early_stop=30, epoch_based_training=False, lr=0.003, lr_decay=0.75, lr_gamma=0.0003, lr_scheduler=True, momentum=0.9, n_epoch=200, n_iter_per_epoch=100, num_workers=3, seed=2022, src_domain='77G', tgt_domain='own', tname='transfer', transfer_loss='mmd', transfer_loss_weight=0.5, use_bottleneck=True, weight_decay=0.0005)
JUST DO IT
run my Parkinson code
transfer
TRAIN Length: 2593 255 TEST Length: 2804 565
DATA_PROFILE   train: 2593 train2: 2804 test: 2804
DATASET.SHAPE: <data_loader.GetLoader object at 0x7f14dc1287c0> True
DATASET.SHAPE: <data_loader.GetLoader object at 0x7f14d3d17eb0> True
DATASET.SHAPE: <data_loader.GetLoader object at 0x7f14d3d539a0> False
CLASS: 4 565
LLL: {}
BOTTLENECK_LIST: [Linear(in_features=512, out_features=256, bias=True), ReLU()]
TYPE: {'loss_type': 'mmd', 'max_iter': 20000, 'num_class': 4, 'my_person_item': <my_person_item.PersonItem object at 0x7f14d3daee20>}
TransferNet(
  (base_network): ResNet(
    (conv1): Conv1d(3, 64, kernel_size=(3,), stride=(2,), padding=(1,), bias=False)
    (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool1d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
      (1): BasicBlock(
        (conv1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
      (2): BasicBlock(
        (conv1): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(64, 64, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv1d(64, 128, kernel_size=(7,), stride=(2,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv1d(64, 128, kernel_size=(1,), stride=(2,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (dropout): Dropout(p=0.2, inplace=False)
      )
      (1): BasicBlock(
        (conv1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
      (2): BasicBlock(
        (conv1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
      (3): BasicBlock(
        (conv1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv1d(128, 256, kernel_size=(7,), stride=(2,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv1d(128, 256, kernel_size=(1,), stride=(2,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (dropout): Dropout(p=0.2, inplace=False)
      )
      (1): BasicBlock(
        (conv1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
      (2): BasicBlock(
        (conv1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
      (3): BasicBlock(
        (conv1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
      (4): BasicBlock(
        (conv1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
      (5): BasicBlock(
        (conv1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv1d(256, 512, kernel_size=(7,), stride=(2,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(512, 512, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv1d(256, 512, kernel_size=(1,), stride=(2,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (dropout): Dropout(p=0.2, inplace=False)
      )
      (1): BasicBlock(
        (conv1): Conv1d(512, 512, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(512, 512, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
      (2): BasicBlock(
        (conv1): Conv1d(512, 512, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv1d(512, 512, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
        (bn2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (dropout): Dropout(p=0.2, inplace=False)
      )
    )
    (avgpool): AdaptiveAvgPool1d(output_size=1)
  )
  (bottleneck_layer): Sequential(
    (0): Linear(in_features=512, out_features=256, bias=True)
    (1): ReLU()
  )
  (classifier_layer): Linear(in_features=256, out_features=4, bias=True)
  (adapt_loss): TransferLoss(
    (loss_func): MMDLoss()
  )
  (criterion): CrossEntropyLoss()
)
initial_lr 1.0
transfer_world
1.8.1+cu111
True
LEN: 0 0
LOADER: <data_loader.InfiniteDataLoader object at 0x7f14d3d2fc40> <data_loader.InfiniteDataLoader object at 0x7f14d3d53550>
N: 100
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.7557061340941512 F1_MA: 0.39370906447815135
BEST_F1_MI: 0.7557061340941512 BEST_F1_MA: 0.39370906447815135
[[2074  557    9    4]
 [   0   25   10   19]
 [   0   19   12   50]
 [   0   10    7    8]]
Epoch: [ 1/200], cls_loss: 0.8613, transfer_loss: 0.0876, total_Loss: 0.9051
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.7054208273894437 F1_MA: 0.3408362229944131
BEST_F1_MI: 0.7557061340941512 BEST_F1_MA: 0.39370906447815135
[[1932  446  262    4]
 [   0    0   30   24]
 [   0    0   37   44]
 [   0    0   16    9]]
Epoch: [ 2/200], cls_loss: 0.6691, transfer_loss: 0.0518, total_Loss: 0.6950
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.9300998573466478 F1_MA: 0.40478478304473264
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.40478478304473264
[[2545    0   99    0]
 [   2    0   40   12]
 [   0    0   57   24]
 [   0    0   19    6]]
Epoch: [ 3/200], cls_loss: 0.6322, transfer_loss: 0.0426, total_Loss: 0.6536
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.011768901569186876 F1_MA: 0.019672278215277998
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.40478478304473264
[[   0  486 1805  353]
 [   0    0    2   52]
 [   0    7   18   56]
 [   0    0   10   15]]
Epoch: [ 4/200], cls_loss: 0.5779, transfer_loss: 0.0511, total_Loss: 0.6035
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.02282453637660485 F1_MA: 0.20901866199447755
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.40478478304473264
[[   0 2630   14    0]
 [   0   27   14   13]
 [   0   28   30   23]
 [   0   14    4    7]]
Epoch: [ 5/200], cls_loss: 0.5169, transfer_loss: 0.0469, total_Loss: 0.5403
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.023537803138373753 F1_MA: 0.308575832261224
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.40478478304473264
[[   0 2644    0    0]
 [   0   48    6    0]
 [   0   64   12    5]
 [   0   18    1    6]]
Epoch: [ 6/200], cls_loss: 0.5369, transfer_loss: 0.0448, total_Loss: 0.5593
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.8017118402282454 F1_MA: 0.4344500795889986
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.4344500795889986
[[2178  438   28    0]
 [   0   10   37    7]
 [   0   14   56   11]
 [   0   11   10    4]]
Epoch: [ 7/200], cls_loss: 0.4909, transfer_loss: 0.0492, total_Loss: 0.5155
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.8548502139800286 F1_MA: 0.37566137705460145
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.4344500795889986
[[2339   21  283    1]
 [   0    0   43   11]
 [   0    6   51   24]
 [   0    2   16    7]]
Epoch: [ 8/200], cls_loss: 0.4853, transfer_loss: 0.0465, total_Loss: 0.5085
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.9094151212553495 F1_MA: 0.4374907153318843
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.4374907153318843
[[2475  124   45    0]
 [   1    4   41    8]
 [   0    4   68    9]
 [   0    4   18    3]]
Epoch: [ 9/200], cls_loss: 0.4717, transfer_loss: 0.0560, total_Loss: 0.4997
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.011412268188302425 F1_MA: 0.21906855330071096
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.4374907153318843
[[   0 2628    1   15]
 [   0   15    0   39]
 [   0   25    5   51]
 [   0   13    0   12]]
Epoch: [10/200], cls_loss: 0.4199, transfer_loss: 0.0583, total_Loss: 0.4491
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.9037089871611983 F1_MA: 0.40546635791255553
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.4374907153318843
[[2497  142    5    0]
 [   1   23   26    4]
 [   0   57    7   17]
 [   0   16    2    7]]
Epoch: [11/200], cls_loss: 0.4096, transfer_loss: 0.0545, total_Loss: 0.4369
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.775320970042796 F1_MA: 0.39549843319583505
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.4374907153318843
[[2122  497   21    4]
 [   0    5   40    9]
 [   0   11   40   30]
 [   0    6   12    7]]
Epoch: [12/200], cls_loss: 0.4050, transfer_loss: 0.0618, total_Loss: 0.4359
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.021398002853067047 F1_MA: 0.21139650954934092
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.4374907153318843
[[   0 2633    7    4]
 [   0   18   31    5]
 [   0   37   36    8]
 [   0   14    5    6]]
Epoch: [13/200], cls_loss: 0.3499, transfer_loss: 0.0541, total_Loss: 0.3770
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.7728245363766049 F1_MA: 0.37800795526921466
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.4374907153318843
[[2133  453   18   40]
 [   0    7   14   33]
 [   0   21   14   46]
 [   0   11    1   13]]
Epoch: [14/200], cls_loss: 0.3532, transfer_loss: 0.0552, total_Loss: 0.3808
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.026034236804564907 F1_MA: 0.10328476859047153
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.4374907153318843
[[   0    1  137 2506]
 [   0    0   43   11]
 [   0    0   67   14]
 [   0    2   17    6]]
Epoch: [15/200], cls_loss: 0.3628, transfer_loss: 0.0599, total_Loss: 0.3928
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.8798145506419401 F1_MA: 0.3850201779525118
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.4374907153318843
[[2428  156   17   43]
 [   1    4   31   18]
 [   0   19   26   36]
 [   1    8    7    9]]
Epoch: [16/200], cls_loss: 0.3225, transfer_loss: 0.0617, total_Loss: 0.3533
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.30634807417974325 F1_MA: 0.39143438113100704
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.4374907153318843
[[ 809 1833    2    0]
 [   1   40    0   13]
 [   0   66    3   12]
 [   0   18    0    7]]
Epoch: [17/200], cls_loss: 0.3159, transfer_loss: 0.0589, total_Loss: 0.3454
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.9265335235378032 F1_MA: 0.4289401341741982
BEST_F1_MI: 0.9300998573466478 BEST_F1_MA: 0.4374907153318843
[[2539   32   26   47]
 [   2    0   34   18]
 [   0    0   49   32]
 [   0   10    5   10]]
Epoch: [18/200], cls_loss: 0.3155, transfer_loss: 0.0675, total_Loss: 0.3493
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.9322396576319544 F1_MA: 0.4978281700714919
BEST_F1_MI: 0.9322396576319544 BEST_F1_MA: 0.4978281700714919
[[2552   86    5    1]
 [   2   25   18    9]
 [   0   35   30   16]
 [   0   16    2    7]]
Epoch: [19/200], cls_loss: 0.2952, transfer_loss: 0.0664, total_Loss: 0.3284
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.025677603423680456 F1_MA: 0.14618397734697244
BEST_F1_MI: 0.9322396576319544 BEST_F1_MA: 0.4978281700714919
[[   0    1 2643    0]
 [   0    0   54    0]
 [   0    6   67    8]
 [   0    2   18    5]]
Epoch: [20/200], cls_loss: 0.2826, transfer_loss: 0.0634, total_Loss: 0.3143
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.9190442225392297 F1_MA: 0.38835367094613354
BEST_F1_MI: 0.9322396576319544 BEST_F1_MA: 0.4978281700714919
[[2552   27    6   59]
 [   2    5    9   38]
 [   5   27    9   40]
 [   1   12    1   11]]
Epoch: [21/200], cls_loss: 0.2861, transfer_loss: 0.0561, total_Loss: 0.3142
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.8580599144079886 F1_MA: 0.4482887564222231
BEST_F1_MI: 0.9322396576319544 BEST_F1_MA: 0.4978281700714919
[[2381    6    0  257]
 [   3    4    1   46]
 [   1   22    7   51]
 [   1   10    0   14]]
Epoch: [22/200], cls_loss: 0.2869, transfer_loss: 0.0552, total_Loss: 0.3145
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.833095577746077 F1_MA: 0.42136628616079963
BEST_F1_MI: 0.9322396576319544 BEST_F1_MA: 0.4978281700714919
[[2258   30  356    0]
 [   0    0   52    2]
 [   0    0   73    8]
 [   0    7   13    5]]
Epoch: [23/200], cls_loss: 0.2620, transfer_loss: 0.0659, total_Loss: 0.2950
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.9390156918687589 F1_MA: 0.4474462747170202
BEST_F1_MI: 0.9390156918687589 BEST_F1_MA: 0.4978281700714919
[[2597   17    6   24]
 [   3    4    7   40]
 [   0   11   19   51]
 [   0   11    1   13]]
Epoch: [24/200], cls_loss: 0.2390, transfer_loss: 0.0603, total_Loss: 0.2692
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.012482168330955777 F1_MA: 0.24195583136398058
BEST_F1_MI: 0.9390156918687589 BEST_F1_MA: 0.4978281700714919
[[   2 2634    2    6]
 [   0   12    2   40]
 [   2   22   11   46]
 [   0   15    0   10]]
Epoch: [25/200], cls_loss: 0.2748, transfer_loss: 0.0577, total_Loss: 0.3037
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.8819543509272468 F1_MA: 0.42156532450335976
BEST_F1_MI: 0.9390156918687589 BEST_F1_MA: 0.4978281700714919
[[2431  209    3    1]
 [   0   13   23   18]
 [   0   34   21   26]
 [   0   16    1    8]]
Epoch: [26/200], cls_loss: 0.2547, transfer_loss: 0.0604, total_Loss: 0.2849
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.021754636233951498 F1_MA: 0.3295392454344277
BEST_F1_MI: 0.9390156918687589 BEST_F1_MA: 0.4978281700714919
[[   0 2643    1    0]
 [   0   47    7    0]
 [   0   72    9    0]
 [   0   18    2    5]]
Epoch: [27/200], cls_loss: 0.2488, transfer_loss: 0.0612, total_Loss: 0.2794
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.8801711840228246 F1_MA: 0.34295551620523734
BEST_F1_MI: 0.9390156918687589 BEST_F1_MA: 0.4978281700714919
[[2432    4  182   26]
 [   0    0   16   38]
 [   0   10   27   44]
 [   0    9    7    9]]
Epoch: [28/200], cls_loss: 0.2176, transfer_loss: 0.0486, total_Loss: 0.2419
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.9454350927246791 F1_MA: 0.43743724557722524
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[2605   29    8    2]
 [   5   11   29    9]
 [   4   30   29   18]
 [   2   13    4    6]]
Epoch: [29/200], cls_loss: 0.2108, transfer_loss: 0.0524, total_Loss: 0.2370
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.023537803138373753 F1_MA: 0.12307532554695068
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[   0    1 2643    0]
 [   0    0   54    0]
 [   0    6   59   16]
 [   0    3   15    7]]
Epoch: [30/200], cls_loss: 0.2086, transfer_loss: 0.0585, total_Loss: 0.2378
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.024607703281027102 F1_MA: 0.12304411087252132
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[   0   10 2634    0]
 [   0    2   52    0]
 [   0   10   65    6]
 [   0   10   13    2]]
Epoch: [31/200], cls_loss: 0.2011, transfer_loss: 0.0713, total_Loss: 0.2368
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.0224679029957204 F1_MA: 0.08797256329381838
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[   0    7 2635    2]
 [   0    1   44    9]
 [   0   14   58    9]
 [   0   10   11    4]]
Epoch: [32/200], cls_loss: 0.1955, transfer_loss: 0.0632, total_Loss: 0.2271
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.9144079885877318 F1_MA: 0.3982756023935406
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[2524   69   20   31]
 [   1    4   19   30]
 [   0   15   28   38]
 [   0   12    5    8]]
Epoch: [33/200], cls_loss: 0.1915, transfer_loss: 0.0583, total_Loss: 0.2206
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.7385877318116976 F1_MA: 0.4292941533226167
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[2029  615    0    0]
 [   0   23    6   25]
 [   2   47   11   21]
 [   0   16    1    8]]
Epoch: [34/200], cls_loss: 0.2068, transfer_loss: 0.0626, total_Loss: 0.2381
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.7995720399429386 F1_MA: 0.3625627085431031
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[2166    2  476    0]
 [   0    0   50    4]
 [   0    1   75    5]
 [   0    6   18    1]]
Epoch: [35/200], cls_loss: 0.2026, transfer_loss: 0.0453, total_Loss: 0.2252
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.8851640513552068 F1_MA: 0.4160155430516462
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[2409    8  225    2]
 [   1    1   46    6]
 [   0    3   67   11]
 [   0    9   11    5]]
Epoch: [36/200], cls_loss: 0.1717, transfer_loss: 0.0615, total_Loss: 0.2025
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.8124108416547788 F1_MA: 0.4303826862971185
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[2221   17  406    0]
 [   2    6   46    0]
 [   0   31   47    3]
 [   0   13    8    4]]
Epoch: [37/200], cls_loss: 0.1802, transfer_loss: 0.0629, total_Loss: 0.2117
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.020684736091298145 F1_MA: 0.30404048719712107
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[   0 2642    2    0]
 [   0   54    0    0]
 [   1   78    2    0]
 [   0   21    2    2]]
Epoch: [38/200], cls_loss: 0.1815, transfer_loss: 0.0641, total_Loss: 0.2135
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.021398002853067047 F1_MA: 0.1929927086163773
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[   0 2641    3    0]
 [   0   29   23    2]
 [   0   39   28   14]
 [   0   15    7    3]]
Epoch: [39/200], cls_loss: 0.1606, transfer_loss: 0.0685, total_Loss: 0.1949
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.9240370898716119 F1_MA: 0.48064310838031765
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[2530   99   15    0]
 [   2   23   27    2]
 [   0   39   33    9]
 [   0   16    4    5]]
Epoch: [40/200], cls_loss: 0.1750, transfer_loss: 0.0479, total_Loss: 0.1990
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.1847360912981455 F1_MA: 0.3037929872630048
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[ 471 2173    0    0]
 [   0   39    0   15]
 [   1   62    0   18]
 [   0   17    0    8]]
Epoch: [41/200], cls_loss: 0.1459, transfer_loss: 0.0423, total_Loss: 0.1671
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.8487874465049929 F1_MA: 0.3369523553766372
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[2357   12   41  234]
 [   0    2   15   37]
 [   0   22    9   50]
 [   0    9    4   12]]
Epoch: [42/200], cls_loss: 0.1490, transfer_loss: 0.0660, total_Loss: 0.1820
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.1825962910128388 F1_MA: 0.26651593326297024
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[ 459  370 1750   65]
 [   0    7   37   10]
 [   1   21   40   19]
 [   0   11    8    6]]
Epoch: [43/200], cls_loss: 0.1530, transfer_loss: 0.0608, total_Loss: 0.1833
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.10306704707560628 F1_MA: 0.2669984762630971
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[ 230   16 2392    6]
 [   1    1   35   17]
 [   0    7   52   22]
 [   0   11    8    6]]
Epoch: [44/200], cls_loss: 0.1537, transfer_loss: 0.0591, total_Loss: 0.1832
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.01747503566333809 F1_MA: 0.27657080046444155
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[   3 2619    3   19]
 [   0   13   19   22]
 [   0   20   26   35]
 [   0   16    2    7]]
Epoch: [45/200], cls_loss: 0.1514, transfer_loss: 0.0660, total_Loss: 0.1844
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.6380171184022825 F1_MA: 0.3962638678528824
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[1715    1  928    0]
 [   0    0   54    0]
 [   0    4   68    9]
 [   0    4   15    6]]
Epoch: [46/200], cls_loss: 0.1475, transfer_loss: 0.0320, total_Loss: 0.1635
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.18687589158345222 F1_MA: 0.32069610460044806
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[ 447   79 2118    0]
 [   0    0   53    1]
 [   0    0   73    8]
 [   0    2   19    4]]
Epoch: [47/200], cls_loss: 0.1498, transfer_loss: 0.0386, total_Loss: 0.1691
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.16904422253922968 F1_MA: 0.32765095211608425
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[ 409 2212   21    2]
 [   0   14   31    9]
 [   0   22   48   11]
 [   0   13    9    3]]
Epoch: [48/200], cls_loss: 0.1423, transfer_loss: 0.0557, total_Loss: 0.1701
trian begin
trian end
n_person 565
SAMPLE
F1_MI: 0.7728245363766049 F1_MA: 0.39375448378936917
BEST_F1_MI: 0.9454350927246791 BEST_F1_MA: 0.4978281700714919
[[2123  517    3    1]
 [   2   35    1   16]
 [   4   50    1   26]
 [   1   16    0    8]]
Epoch: [49/200], cls_loss: 0.1296, transfer_loss: 0.0532, total_Loss: 0.1562
[[2552   86    5    1]
 [   2   25   18    9]
 [   0   35   30   16]
 [   0   16    2    7]]
[[2605   29    8    2]
 [   5   11   29    9]
 [   4   30   29   18]
 [   2   13    4    6]]
ARG: Namespace(backbone='resnet50', batch_size=32, config='DAN/DAN.yaml', data_dir='data', device=device(type='cuda'), early_stop=30, epoch_based_training=False, lr=0.003, lr_decay=0.75, lr_gamma=0.0003, lr_scheduler=True, max_iter=20000, momentum=0.9, n_class=4, n_epoch=200, n_iter_per_epoch=100, num_workers=3, seed=2022, src_domain='77G', tgt_domain='own', tname='transfer', transfer_loss='mmd', transfer_loss_weight=0.5, use_bottleneck=True, weight_decay=0.0005)
CL_weight [1, 1, 1, 1]
